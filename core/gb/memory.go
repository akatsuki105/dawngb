package gb

func (g *GB) Read(addr uint16) uint8 {
	switch addr >> 12 {
	case 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xA, 0xB:
		return g.cartridge.Read(addr)
	case 0x8, 0x9:
		return g.ppu.Read(addr)
	case 0xC, 0xE:
		return g.wram[addr&0xFFF]
	case 0xD:
		return g.wram[(g.wramBank<<12)|uint(addr&0xFFF)]
	case 0xF:
		if addr <= 0xFDFF {
			return g.wram[(g.wramBank<<12)|uint(addr&0xFFF)]
		}
		if addr >= 0xFE00 && addr <= 0xFE9F {
			return g.ppu.Read(addr)
		}
		switch addr {
		case 0xFF00:
			return g.cpu.ReadIO(addr)
		case 0xFF01, 0xFF02:
			return g.cpu.ReadIO(addr)
		case 0xFF04, 0xFF05, 0xFF06, 0xFF07:
			return g.cpu.ReadIO(addr)
		case 0xFF0F:
			return g.cpu.ReadIO(addr)
		case 0xFF10, 0xFF11, 0xFF12, 0xFF13, 0xFF14, 0xFF16, 0xFF17, 0xFF18, 0xFF19, 0xFF1A, 0xFF1B, 0xFF1C, 0xFF1D, 0xFF1E, 0xFF20, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0xFF3B, 0xFF3C, 0xFF3D, 0xFF3E, 0xFF3F:
			return g.apu.Read(addr)
		case 0xFF40, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4F, 0xFF68, 0xFF69, 0xFF6A, 0xFF6B:
			return g.ppu.Read(addr)
		case 0xFF4D, 0xFF72, 0xFF73, 0xFF74:
			return g.cpu.ReadIO(addr)
		case 0xFF50:
			return 1
		case 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55: // DMA
			if g.cartridge.IsCGB() {
				return g.cpu.ReadIO(addr)
			}
		case 0xFF56:
			return 0x02 // TODO: infrared
		case 0xFF70:
			return uint8(g.wramBank)
		case 0xFFFF:
			return g.cpu.IE
		}
	}
	return 0
}

func (g *GB) Write(addr uint16, val uint8) {
	switch addr >> 12 {
	case 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xA, 0xB:
		g.cartridge.Write(addr, val)
	case 0x8, 0x9:
		g.ppu.Write(addr, val)
	case 0xC, 0xE:
		g.wram[addr&0xFFF] = val
	case 0xD:
		g.wram[(g.wramBank<<12)|uint(addr&0xFFF)] = val
	case 0xF:
		if addr <= 0xFDFF {
			g.wram[(g.wramBank<<12)|uint(addr&0xFFF)] = val
		}
		if addr >= 0xFE00 && addr <= 0xFE9F {
			g.ppu.Write(addr, val)
			return
		}

		switch addr {
		case 0xFF00:
			g.cpu.WriteIO(addr, val)
		case 0xFF01, 0xFF02:
			g.cpu.WriteIO(addr, val)
		case 0xFF04, 0xFF05, 0xFF06, 0xFF07:
			g.cpu.WriteIO(addr, val)
		case 0xFF0F:
			g.cpu.WriteIO(addr, val)
		case 0xFF10, 0xFF11, 0xFF12, 0xFF13, 0xFF14, 0xFF16, 0xFF17, 0xFF18, 0xFF19, 0xFF1A, 0xFF1B, 0xFF1C, 0xFF1D, 0xFF1E, 0xFF20, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0xFF3B, 0xFF3C, 0xFF3D, 0xFF3E, 0xFF3F:
			g.apu.Write(addr, val)
		case 0xFF40, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF68, 0xFF69, 0xFF6A, 0xFF6B, 0xFF6C:
			g.ppu.Write(addr, val)
		case 0xFF4F:
			if g.cartridge.IsCGB() {
				g.ppu.Write(addr, val)
			}
		case 0xFF46:
			g.ppu.TriggerDMA(uint16(val)<<8, g.cpu.Clock)
		case 0xFF4D, 0xFF72, 0xFF73, 0xFF74:
			g.cpu.WriteIO(addr, val)
		case 0xFF50:
			g.cpu.WriteIO(addr, val)
		case 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55: // DMA
			if g.cartridge.IsCGB() {
				g.cpu.WriteIO(addr, val)
			}
		case 0xFF70:
			if g.cartridge.IsCGB() {
				g.wramBank = uint(val & 0b111)
				if g.wramBank == 0 {
					g.wramBank = 1
				}
			}
		case 0xFFFF:
			g.cpu.IE = val
		}
	}
}
